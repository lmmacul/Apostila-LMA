f.NRC.EBW <- function(LW, NDF, op = op.LW.EBW[1]){
EBW <- switch (op,
"NDF" = {
gut_fill <- 0.0534 + 0.329 * NDF
LW * (1-gut_fill)},
"const" = LW*par$LW_to_SBW*par$SBW_to_EBW
)
}
f.NRC.DMI <- function(SBW, NEm, op = op.age[2]){
if (op == "calves")
NEmI.intercept = 0.1128
else
NEmI.intercept = 0.0869
MSWB <- SBW^0.75
NEmI_MSWB <- 0.2435*NEm -0.0466*NEm^2-NEmI.intercept
DMI <- MSWB * NEmI_MSWB/NEm
}
#### Algebraic (Auxiliary) Equations ####
op.Breed[1]
op.LW.EBW <- c("NDF", "const")
op.age <-  c("calves", "yearlings")
op.Breed <-  c("Nellore", "Angus", "Holstein")
op.Sex <-  c("Bull", "Steer", "Female")
sw <- list(
LW.EBW =  op.LW.EBW[1], # defines model to estimate EBW
age =  op.age[2],       # defines age of the animal
Breed = op.Breed[1],
Sex = op.Breed[1]
)
op.Breed[1]
op.Breed[2]
op.Breed[3]
Mult.Sex.FEBW <- switch(sw$Sex, "Female" = 0.82, "Steer" = 1, "Bull" = 1.18)
Mult.Breed.FEBW <- switch(sw$Breed, "Nellore" =  1, "Angus" = 1, "Holstein" = 1.2)
Mult.Breed.FEBW
Mult.Sex.FEBW
sw$Sex
source('D:/Desktop 2018/NRC Feed NE & EBW.R', echo=TRUE)
source('D:/Desktop 2018/NRC Feed NE & EBW.R', echo=TRUE)
source('D:/Desktop 2018/NRC Feed NE & EBW.R', echo=TRUE)
a.EBG
a.RE
a.Maint
a.DMI
a.EQEBW
Mult.Sex.FEBW
Mult.Breed.FEBW
sw$Sex
source('D:/Desktop 2018/NRC Feed NE & EBW.R', echo=TRUE)
a.EBG
a.Maint
Mult.Sex.FEBW
a.EQEBW
a.DMI
a.Maint
par$alpha.maint
par$alphaMaint
source('D:/Desktop 2018/NRC Feed NE & EBW.R', echo=TRUE)
a.EBG
#### Algebraic (Auxiliary) Equations ####
# Diet energy concentration (MCal/kg DM)
a <- list()
a$DE = par$GE * inp$dig
a
source('D:/Desktop 2018/NRC Feed NE & EBW.R', echo=TRUE)
a
as.vector(a)
unlist(a)
curve(f.NRC.MEtoNEm)
curve(f.NRC.MEtoNEm, from = 1, to = 2)
curve(f.NRC.MEtoNEm)
curve(f.NRC.MEtoNEm, 1,2)
#### Aula de Nutri??o e Crescimento Animal####
library(deSolve)
#### Inputs ####
inp <- list(
LWi = 350,
BCSi = 5,            # Body condition score (dimensionless, 1 - 9)
DMI = 7.41,         # Dry Matter Intake Rate (kg/day) as a fixed value or as a function of time (using approxfun)
Frame = 1,          # Multiplier of final liveweight (dimensionless)
LWGp = 0.5,
Feed_MEC = 2.84,
Feed_NEm = 1.9,
Feed_NEg = 1.26
)
st <- list(
Prot = NA,
Fat = NA,
DNA = NA
)
#### Constants ####
ct <- list(EPROT = 5.539,      # Protein Energy Concentration
EFAT = 9.385,        # Fat Energy Concentration
LEAN_PROT = 0.2201,  # Proportion of protein in lean mass
EBWMref = 750,       # Ref EBW for k1 correction
DNAmax_Ref = 385     # Ref DNAmax for Frame corrections
)
#### Parameters ####
par <- list(kD = 0.00493,        # Maturing rate parameter
kPs = 0.0444,         # Protein synthesis parameter
kPd = 0.143,          # Protein degradation parameter
alpha = 0.0841,      # Individual maintenance parameter
DNAmax = 385,        # Maximum DNA mass
EBWM = 750,          # Mature body weight
MEI_0 = 0.438,       # First parameter of the equation of reference ME intake
MEI_1 = 0.2615,      # Second parameter of the equation of reference ME intake
beta.D_0 = -0.70,      # First parameter of the equation of the effect of nutrition on rate of de DNA deposition
beta.D_1 = 1.7,        # Second parameter of the equation of the effect of nutrition on rate of de DNA deposition
gamma.P_0 = 0.83,       # First parameter of the equation of the effect of nutrition on the rate of protein synthesis
gamma.P_1 = 0.20,       # Second parameter of the equation of the effect of nutrition on the rate of protein synthesis
gamma.P_2 = 0.15,       # Third parameter of the equation of the effect of nutrition on the rate of protein synthesis
LW_to_EBW = 0.96* 0.891     # Empty Body Weight as a propotion of Liveweight (dimensionless)
)
#### Switches ####
op <- c()
sw <- list(
)
#### Functions ####
f.Michalis.Menten <- function(x, y.intcpt = 0, y.max = 1, K = 0.5){
y.intcpt + (y.max - y.intcpt)*x/(K + x)
}
f.FatPerc <- function(EQEBW, EBWM, BCS, EBWM_ref = 750){
BW_Eq = (EBWM_ref/EBWM)*EQEBW
return((0.333+0.0833*BCS)*(BW_Eq-54.6)/(826+BW_Eq))
}
#### Algebraic (Auxiliary) Equations ####
# Diet energy concentration (MCal/kg DM)
f.aux <- function(){
aux$MEI <- inp$DMI * inp$Feed_MEC
aux$EBW <- st$Prot/ct$LEAN_PROT + st$Fat
aux$Maturity <- st$Prot/par$Protmax
aux$MEInorm <- (par$MEI_0 - par$MEI_1*aux$Maturity)*aux$EBW^0.73
aux$MaintNE <- par$alpha*aux$EBW^0.75                                                      # Net Energy required for maintenance
aux$MaintDMI <- aux$MaintNE/inp$Feed_NEm                                                   # DMI required for maintenance
aux$RE <- (inp$DMI - aux$MaintDMI)*inp$Feed_NEg                                            # Retained Energy
aux$ER <- aux$MEI/aux$MEInorm
aux$ND <- par$beta.D_0 + par$beta.D_1*aux$ER
aux$NP <- f.Michalis.Menten(x = aux$ER,
y.intcpt = par$gamma.P_0,
y.max = par$gamma.P_0 + par$gamma.P_1,
K = par$gamma.P_2)
assign("aux", value = aux, envir = .GlobalEnv)
}
#### Differential Equations ####
Oltjen.Diff <- function (t, y, par)
{
st <<- as.list(y)
f.aux() # Calculate auxiliary
# Calculate the differentials
dDNA <- par$kD*aux$ND*(par$DNAmax - st$DNA)                                # d DNA mass/dt
dPROT <- par$kPs * aux$NP * st$DNA^0.73 - par$kPd * st$Prot^(0.73)         # d Protein mass/dt
dFAT <- (aux$RE - dPROT * ct$EPROT)/ct$EFAT                             # d Fat mass/dt
return(list(c(dPROT = dPROT, dFAT = dFAT, dDNA = dDNA), aux))              # outputs a list with the differential as required by deSolve:ode funcion
}
#### Initialize ####
aux <- list()
init <- list()
# Initialize State
init$EBW <- inp$LWi*par$LW_to_EBW
init$EQEBW <- init$EBW/inp$Frame
init$Fatfrac <- f.FatPerc(EQEBW = EQEBW, EBWM = inp$Frame*ct$EBWMref, BCS = inp$BCS, EBWM_ref = ct$EBWMref)
st$Fat <- init$EBW * init$Fatfrac
st$Prot <- (init$EBW -  st$Fat) * ct$LEAN_PROT
init$RE <- 0.0625 * init$EQEBW^0.75 * (inp$LWGp* par$LW_to_EBW)^1.097
init$PIG <- 0.248 - 0.0264 * init$RE/inp$LWGp
st$DNA <- ((par$kPd*st$Prot^0.73 + inp$LWGp*par$LW_to_EBW * init$PIG)/par$kPs)^(1/0.73)
# Initialize Parameters
par$Protmax <- par$DNAmax*(par$kPs/par$kPd)^1/0.73
#### Simulate ####
Traj <- ode(y = unlist(st), times = seq(1, 200, 1), func = Oltjen.Diff, parms = par)
Traj <- ode(y = unlist(st), times = seq(1, 200, 1), func = Oltjen.Diff, parms = par)
unlist(st)
# Initialize State
init$EBW <- inp$LWi*par$LW_to_EBW
init$EQEBW <- init$EBW/inp$Frame
init$Fatfrac <- f.FatPerc(EQEBW = EQEBW, EBWM = inp$Frame*ct$EBWMref, BCS = inp$BCS, EBWM_ref = ct$EBWMref)
st$Fat <- init$EBW * init$Fatfrac
st$Prot <- (init$EBW -  st$Fat) * ct$LEAN_PROT
init$RE <- 0.0625 * init$EQEBW^0.75 * (inp$LWGp* par$LW_to_EBW)^1.097
init$PIG <- 0.248 - 0.0264 * init$RE/inp$LWGp
st$DNA <- ((par$kPd*st$Prot^0.73 + inp$LWGp*par$LW_to_EBW * init$PIG)/par$kPs)^(1/0.73)
st
# Initialize State
init$EBW <- inp$LWi*par$LW_to_EBW
init$EBW
init$EQEBW
init$Fatfrac
EBWM = inp$Frame*ct$EBWMref
BCS = inp$BCS
EBWM_ref = ct$EBWMref
aux$MEI <- inp$DMI * inp$Feed_MEC
aux$EBW <- st$Prot/ct$LEAN_PROT + st$Fat
aux$Maturity <- st$Prot/par$Protmax
init$Fatfrac <- f.FatPerc(EQEBW = EQEBW, EBWM = inp$Frame*ct$EBWMref, BCS = inp$BCS, EBWM_ref = ct$EBWMref)
init$EBW <- inp$LWi*par$LW_to_EBW
init$EQEBW <- init$EBW/inp$Frame
EQEBW = Init
init$Fatfrac <- f.FatPerc(EQEBW = init$EQEBW, EBWM = inp$Frame*ct$EBWMref,
BCS = inp$BCS, EBWM_ref = ct$EBWMref)
init$Fatfrac
st$Fat <- init$EBW * init$Fatfrac
st$Prot <- (init$EBW -  st$Fat) * ct$LEAN_PROT
init$RE <- 0.0625 * init$EQEBW^0.75 * (inp$LWGp* par$LW_to_EBW)^1.097
init$PIG <- 0.248 - 0.0264 * init$RE/inp$LWGp
st$DNA <- ((par$kPd*st$Prot^0.73 + inp$LWGp*par$LW_to_EBW * init$PIG)/par$kPs)^(1/0.73)
st$Fat
st$Prot
init$RE
init$PIG
st$DNA
# Initialize Parameters
par$Protmax <- par$DNAmax*(par$kPs/par$kPd)^1/0.73
Traj <- ode(y = unlist(st), times = seq(1, 200, 1), func = Oltjen.Diff, parms = par)
unlist(st)
st$Fat
st$Fat <- init$EBW * init$Fatfrac
st$Fat
debugSource('D:/Desktop 2018/Aula Modelagem Nutrição e Crescimento de Ruminantes/Code/Oltjen.R', echo=TRUE)
RE
aux$RE
aux$NP
RE
aux$RE
aux
source('D:/Desktop 2018/Aula Modelagem Nutrição e Crescimento de Ruminantes/Code/Oltjen.R', echo=TRUE)
Traj
plot(Traj)
Traj <- ode(y = unlist(st), times = seq(1, 100, 1), func = Oltjen.Diff, parms = par)
Traj
plot(Traj)
Traj <- ode(y = unlist(st), times = seq(1, 150, 1), func = Oltjen.Diff, parms = par)
plot(Traj)
Traj <- ode(y = unlist(st), times = seq(1, 200, 1), func = Oltjen.Diff, parms = par)
plot(Traj)
source('D:/Desktop 2018/Aula Modelagem Nutrição e Crescimento de Ruminantes/Code/Oltjen.R', echo=TRUE)
plot(Traj)
plot(Traj)
names(Traj)
colnames(Traj)
par(mfcol = 2, mfrow = 2)
par(mfcol = c(2,2))
plot(Traj)
par(mfrow = c(2,2))
plot(Traj)
plot(Traj[,"time"], Traj[,"EBW"])
plot(Traj[,"time"], )
Traj[,"EBW"]
plot.new()
par(mfrow = c(2,2))
plot(Traj[,"time"], Traj[,"EBW"])
plot(Traj)
plot.new()
par(mfrow = c(2,2))
plot(Traj[,"time"], Traj[,"EBW"])
plot(Traj[,"time"], c(0,diff(Traj[,"EBW"])))
plot(Traj[,"time"], c(NA,diff(Traj[,"EBW"])))
Fat.Perc <- Traj[,"Fat"]/Traj[,"EBW"]
Fat.Perc
Plot(Traj[,"time"], Fat.Perc)
plot(Traj[,"time"], Fat.Perc)
plot(Traj[,"EBW"], Fat.Perc)
fFatEBW <- approxfun(Fat.Perc, Traj[,"EBW"])
fFatEBW(0.28)
source('D:/Desktop 2018/Aula Modelagem Nutrição e Crescimento de Ruminantes/Code/Oltjen.R', echo=TRUE)
Traj
source('D:/Desktop 2018/Aula Modelagem Nutrição e Crescimento de Ruminantes/Code/NRC 2000 Aula.R', echo=TRUE)
EQEBW <- EBW
a$EBG <- 12.341*EQEBW^-0.6837*RE^0.9116
#### Aula de Nutri??o e Crescimento Animal####
#### Inputs ####
inp <- list(
Dig = 0.65,  # Feed Dry Matter Digestibility (% DM)
LW = 400
)
#### Constants ####
ct <- list(
)
#### Parameters ####
par <- list(
GE = 4.42, # Feed Gross Energy Concentration Mcal kg DM
DEtoME = 0.82, # NRC Factor to convert ME to DE
LWtoSBW = 0.96,
SBWtoEBW = 0.891
)
EQEBW <- inp$LW*par$LWtoSBW*par$SBWtoEBW
source('D:/Desktop 2018/Aula Modelagem Nutrição e Crescimento de Ruminantes/Code/NRC 2000 Aula.R', echo=TRUE)
a$SBW <- par$LWtoSBW * inp$LW
a$SBW
a$EBW <- par$SBWtoEBW * a$SBW
source('D:/Desktop 2018/Aula Modelagem Nutrição e Crescimento de Ruminantes/Code/NRC 2000 Aula.R', echo=TRUE)
#### Aula de Nutri??o e Crescimento Animal####
#### Inputs ####
inp <- list(
Dig = 0.65,  # Feed Dry Matter Digestibility (% DM)
LW = 400
)
#### Constants ####
ct <- list(
)
#### Parameters ####
par <- list(
GE = 4.42, # Feed Gross Energy Concentration Mcal kg DM
DEtoME = 0.82, # NRC Factor to convert ME to DE
LWtoSBW = 0.96,
SBWtoEBW = 0.891,
alphaMaint = 0.077
#
)
#### Switches ####
op <- c()
sw <- list(
)
#### Functions ####
# NRC function to calculate NEm from ME (MCal/kg DM)
f.NRC.MEtoNEm <- function(ME){1.37*ME-0.138*ME^2+0.0105*ME^3-1.12}
# NRC function to calculate NEg from ME (MCal/kg DM)
f.NRC.MEtoNEg <- function(ME){1.42*ME-0.174*ME^2+0.0122*ME^3-1.65}
a$Maint = par$alphaMaint * a$SBW^0.75
a
unlist(a)
inp$DMI
a$RE <- (inp$DMI - a$Maint/a$NEm)*a$NEg
a$RE
a$EQEBW <- a$EBW
a$EQEBW
a$EBG <- 12.341*a.EQEBW^-0.6837*RE^0.9116
a$EBG <- 12.341*a.EQEBW^-0.6837*RE^0.9116
a$RE <- (inp$DMI - a$Maint/a$NEm)*a$NEg
a$EQEBW <- a$EBW
a$EBG <- 12.341*a.EQEBW^-0.6837*RE^0.9116
a$EBG <- 12.341*a.EQEBW^-0.6837*a$RE^0.9116
a$LWG <- a$EBG*inp$LW/a$EBW
unlist(a)
source('D:/Desktop 2018/Aula Modelagem Nutrição e Crescimento de Ruminantes/Code/NRC 2000 Aula.R', echo=TRUE)
source('D:/Desktop 2018/Aula Modelagem Nutrição e Crescimento de Ruminantes/Code/NRC 2000 Aula.R', echo=TRUE)
a$EBG
a$RE
a$RE <- (inp$DMI - a$Maint/a$NEm)*a$NEg
a$RE <- (a$DMI - a$Maint/a$NEm)*a$NEg
a$RE
a$EQEBW <- a$EBW
a$EBG <- 12.341*a.EQEBW^-0.6837*a$RE^0.9116
a$EBG
a$LWG <- a$EBG*inp$LW/a$EBW
a$LWG
unlist(a)
#### Testing and Visualization ####
#unlist(a)
curve(f.NRC.MEtoNEm, 1,2)
#### Testing and Visualization ####
#unlist(a)
plot(f.NRC.MEtoNEm, from = 1, to = 2)
source('D:/Desktop 2018/Aula Modelagem Nutrição e Crescimento de Ruminantes/Code/NRC 2000 Aula.R', echo=TRUE)
#### Testing and Visualization ####
a
unlist(a)
source('D:/Desktop 2018/Aula Modelagem Nutrição e Crescimento de Ruminantes/Code/NRC 2000 Aula.R', echo=TRUE)
#### Aula de Nutri??o e Crescimento Animal####
#### Inputs ####
inp <- list(
dig = 0.7,  # DM Digestibility (dimensionless)
LW  = 350,  # Empty Body Weight (kg)
NDF = 0.3,  # Neutral Detergent Fiber concentration in diet (dimensionless)
BCS = 5     # Body Condition Score (dimensionless, 1 - 9)
)
#### Constants ####
ct <- list(
SRW = 478           # Shrunk Reference Weight (kg)
)
#### Parameters ####
par <- list(
GE = 4.42,         # Feed Gross Energy (Mcal/kg DM)
NRC.MEtoDE = 0.82, # Proportion of ME in DE
LW_to_SBW = 0.96,  # Shrunk Body Weight as a propotion of liveweight (dimensionless)
SBW_to_EBW = 0.891, # Empty Body Weight as a propotion of Shrunk Body Weight (dimensionless)
alphaMaint = 0.077 # Maintenance requirements per metabolic body weight (Mcal/kg^0.75)
)
#### switches ####
op.LW.EBW <- c("NDF", "const")
op.age <-  c("calves", "yearlings")
op.Breed <-  c("Nellore", "Angus", "Holstein")
op.Sex <-  c("Bull", "Steer", "Female")
op.LW.EBW[1]
Breed = op.Breed[1]
Breed
f.Maint <- function(alpha, SBW, BCS = 5, Breed = op.Breed[1]){
Breed.Mult <- switch(Breed,
"Nellore" = 0.9,
"Angus" = 1,
"Holstein" = 1.2)
BCS.Mult <- 0.8 + (BCS-1) * 0.05
a.Maint <- alpha * BCS.Mult * Breed.Mult * SBW^0.75
}
#### Aula de Nutri??o e Crescimento Animal####
#### Inputs ####
inp <- list(
dig = 0.7,  # DM Digestibility (dimensionless)
LW  = 350,  # Empty Body Weight (kg)
NDF = 0.3,  # Neutral Detergent Fiber concentration in diet (dimensionless)
BCS = 5     # Body Condition Score (dimensionless, 1 - 9)
)
#### Constants ####
ct <- list(
SRW = 478           # Shrunk Reference Weight (kg)
)
#### Parameters ####
par <- list(
GE = 4.42,         # Feed Gross Energy (Mcal/kg DM)
NRC.MEtoDE = 0.82, # Proportion of ME in DE
LW_to_SBW = 0.96,  # Shrunk Body Weight as a propotion of liveweight (dimensionless)
SBW_to_EBW = 0.891, # Empty Body Weight as a propotion of Shrunk Body Weight (dimensionless)
alphaMaint = 0.077 # Maintenance requirements per metabolic body weight (Mcal/kg^0.75)
)
#### switches ####
op.LW.EBW <- c("NDF", "const")
op.age <-  c("calves", "yearlings")
op.Breed <-  c("Nellore", "Angus", "Holstein")
op.Sex <-  c("Bull", "Steer", "Female")
sw <- list(
LW.EBW =  op.LW.EBW[1], # defines model to estimate EBW
age =  op.age[2],       # defines age of the animal
Breed = op.Breed[1],
Sex = op.Sex[1]
)
#### Functions ####
# NRC function to calculate NEm from ME (MCal/kg DM)
f.NRC.MEtoNEm <- function(ME){1.37*ME-0.138*ME^2+0.0105*ME^3-1.12}
# NRC function to calculate NEg from ME (MCal/kg DM)
f.NRC.MEtoNEg <- function(ME){1.42*ME-0.174*ME^2+0.0122*ME^3-1.65}
f.Maint <- function(alpha, SBW, BCS = 5, Breed = op.Breed[1]){
Breed.Mult <- switch(Breed,
"Nellore" = 0.9,
"Angus" = 1,
"Holstein" = 1.2)
BCS.Mult <- 0.8 + (BCS-1) * 0.05
a.Maint <- alpha * BCS.Mult * Breed.Mult * SBW^0.75
}
f.NRC.EBW <- function(LW, NDF, op = op.LW.EBW[1]){
EBW <- switch (op,
"NDF" = {
gut_fill <- 0.0534 + 0.329 * NDF
LW * (1-gut_fill)},
"const" = LW*par$LW_to_SBW*par$SBW_to_EBW
)
}
f.NRC.DMI <- function(SBW, NEm, op = op.age[2]){
if (op == "calves")
NEmI.intercept = 0.1128
else
NEmI.intercept = 0.0869
MSWB <- SBW^0.75
NEmI_MSWB <- 0.2435*NEm -0.0466*NEm^2-NEmI.intercept
DMI <- MSWB * NEmI_MSWB/NEm
}
#### Algebraic (Auxiliary) Equations ####
# Diet energy concentration (MCal/kg DM)
a <- list()
a$DE = par$GE * inp$dig
a$ME = a$DE * par$NRC.MEtoDE
a$NEm = f.NRC.MEtoNEm(a$ME)
a$NEg = f.NRC.MEtoNEg(a$ME)
# Body Weight (kg)
a$SBW = inp$LW * par$LW_to_SBW
a$EBW = f.NRC.EBW(LW = inp$LW, NDF = inp$NDF, op = sw$LW.EBW)
Mult.Breed.FEBW <- switch(sw$Breed, "Nellore" =  1, "Angus" = 1, "Holstein" = 1.2)
Mult.Sex.FEBW <- switch(sw$Sex, "Female" = 0.82, "Steer" = 1, "Bull" = 1.18)
a$EQEBW = a$SBW * 1/(Mult.Breed.FEBW * Mult.Sex.FEBW)
# Dry Matter Intake (kg/day)
a$DMI = f.NRC.DMI(SBW = a$SBW, NEm = a$NEm, op = sw$age)
# Requirements
a$Maint = par$alphaMaint * a$SBW^0.75
a$RE = (a$DMI - a$Maint/a$NEm)*a$NEg
a$EBG = 12.341 * a$EQEBW^-0.6837 * a$RE^0.9116
a$LWG = a$EBG*inp$LW/a$EBW
#### Test & Visualization ####
unlist(a)
#plot(inp$dig, a$NEm, type=
plot(f.NRC.MEtoNEm,
from = 1.8, to =3,
xlab = "ME",
col = "red",
ylim = c(0,3))
par(new=TRUE)
plot(f.NRC.MEtoNEg, from = 1.8, to =3,
axes = F,
xlab = "",
ylab = "",
col = "green",
ylim = c(0,3))
seq(1, 100, 1)
st
vst <- unlist(st)
vst
vst["Prot"]
source('D:/Desktop 2018/Aula Modelagem Nutrição e Crescimento de Ruminantes/Code/Oltjen.R', echo=TRUE)
View(Traj)
plot(Traj)
plot(Traj)
colnames(Traj)
plot(Traj[, "time"], Traj[, "EBW"])
par(mfcol= 1, mfrow = 1)
par(mfcol= c(1, 1))
plot(Traj[, "time"], Traj[, "EBW"])
par(mfcol= c(2, 2))
plot(Traj[, "time"], Traj[, "EBW"])
plot(Traj[, "time"], diff(Traj[, "EBW"]))
plot(Traj[, "time"], c(diff(Traj[, "EBW"]), NA))
#### Testing and Visualization ####
Fatp <- Traj[, "Fat"]/ Traj[, "EBW"]
Fatp
plot(Traj[, "time"], Fatp)
plot(Traj[, "EBW"], Fatp)
